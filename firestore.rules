rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /shareInvitations/{invitationId} {
      allow read, write: if request.auth != null;
    }

    match /products/{productId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.userId || 
        request.auth.uid in resource.data.sharedWith
      );
      allow create: if request.auth != null && (
        request.auth.uid == request.resource.data.userId ||
        request.auth.uid in request.resource.data.sharedWith
      );
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        request.auth.uid in resource.data.sharedWith
      );
    }

    match /userProducts/{productId} {
      // Allow reading user's own products
      allow read: if request.auth != null;
      
      // Allow creating documents where the user is the owner
      allow create: if request.auth != null && 
                   request.resource.data.userId == request.auth.uid &&
                   request.resource.data.name is string &&
                   request.resource.data.category is string;
      
      // Allow updating and deleting own documents
      allow update, delete: if request.auth != null && 
                          resource.data.userId == request.auth.uid;
    }

    match /userSettings/{userId} {
      allow read: if request.auth != null;  // Allow reading any user settings for verification
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    match /userSharing/{userId} {
      // Allow read to check if users exist
      allow read: if request.auth != null;
      
      // Allow create/update in these cases:
      // 1. User is updating their own document
      // 2. User is being added as a friend (exists in sharedWith array)
      // 3. User has an accepted invitation
      allow create, update: if request.auth != null && (
        // Own document
        request.auth.uid == userId ||
        
        // Already shared
        (request.resource.data.sharedWith != null && 
         request.resource.data.sharedWith.hasAny([{'userId': request.auth.uid}])) ||
        
        // Setting or cleaning up invitationId
        ((request.resource.data.invitationId == null ||
          (exists(/databases/$(database)/documents/shareInvitations/$(request.resource.data.invitationId)) &&
           get(/databases/$(database)/documents/shareInvitations/$(request.resource.data.invitationId)).data.status == 'accepted' &&
           (
             get(/databases/$(database)/documents/shareInvitations/$(request.resource.data.invitationId)).data.fromUserId == request.auth.uid ||
             get(/databases/$(database)/documents/shareInvitations/$(request.resource.data.invitationId)).data.toUserId == request.auth.uid
           ))) &&
         (resource.data.invitationId == null || resource.data.invitationId == request.resource.data.invitationId)) ||
        
        // Updating sharedWith when user has valid invitation
        (request.resource.data.sharedWith != null &&
         resource.data.invitationId != null &&
         exists(/databases/$(database)/documents/shareInvitations/$(resource.data.invitationId)) &&
         get(/databases/$(database)/documents/shareInvitations/$(resource.data.invitationId)).data.status == 'accepted' &&
         (
           get(/databases/$(database)/documents/shareInvitations/$(resource.data.invitationId)).data.fromUserId == request.auth.uid ||
           get(/databases/$(database)/documents/shareInvitations/$(resource.data.invitationId)).data.toUserId == request.auth.uid
         ))
      );
    }

    match /notifications/{notificationId} {
      // Allow read of own notifications
      allow read: if request.auth != null && resource.data.toUserId == request.auth.uid;
      // Allow create for authenticated users
      allow create: if request.auth != null;
      // Allow update/delete of own notifications
      allow update, delete: if request.auth != null && resource.data.toUserId == request.auth.uid;
    }

    match /mail/{mailId} {
      // Allow create for authenticated users
      allow create: if request.auth != null;
      // No read/update/delete needed for mail queue
      allow read, update, delete: if false;
    }
  }
}
